// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

// gibbs
List gibbs(const int data_length, const int dim, const RcppGSL::matrix<double>& data_raw, const RcppGSL::matrix<double>& data_raw_result, const double alpha, const int burn_in, const int iteration);
RcppExport SEXP _CRPClustering_gibbs(SEXP data_lengthSEXP, SEXP dimSEXP, SEXP data_rawSEXP, SEXP data_raw_resultSEXP, SEXP alphaSEXP, SEXP burn_inSEXP, SEXP iterationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type data_length(data_lengthSEXP);
    Rcpp::traits::input_parameter< const int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const RcppGSL::matrix<double>& >::type data_raw(data_rawSEXP);
    Rcpp::traits::input_parameter< const RcppGSL::matrix<double>& >::type data_raw_result(data_raw_resultSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< const int >::type iteration(iterationSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs(data_length, dim, data_raw, data_raw_result, alpha, burn_in, iteration));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CRPClustering_gibbs", (DL_FUNC) &_CRPClustering_gibbs, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_CRPClustering(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
